import shutil
import warnings
import time
import numpy as np
from pathlib import Path
from datetime import datetime
import pytz
import quantities as pq

import pyopenephys
import probeinterface as pi

import expipe


def convert_to_nwb(project, action, openephys_path, probe_path, entity_id, user, include_events, overwrite):
    from .utils import _make_data_path
    from ..nwbutils.cinplanwbconverter import CinplaNWBConverter

    nwb_path = _make_data_path(action, overwrite)

    source_data = dict(
        OpenEphysRecording=dict(folder_path=str(openephys_path)),
        OpenEphysTracking=dict(folder_path=str(openephys_path)),
    )

    converter = CinplaNWBConverter(source_data)
    if probe_path is not None:
        print("Attaching probe")
        probegroup = pi.read_probeinterface(probe_path)
        converter.set_probegroup(probegroup)
    else:
        print("Probe not found, skipping probe attachment")

    if include_events:
        converter.enable_events()

    metadata = converter.get_metadata()
    entity = project.entities[entity_id]

    # Add NWB metadata
    # NWBFile
    metadata["NWBFile"]["session_description"] = "Open Ephys session, automatically generated by expipe-plugin-cinpla"
    metadata["NWBFile"]["experimenter"] = [user]
    metadata["NWBFile"]["session_start_time"] = action.datetime.replace(tzinfo=pytz.timezone("CET"))
    # Subject
    metadata["Subject"]["subject_id"] = entity_id
    if "species" not in entity.attributes:
        warnings.warn("Species not found in entity attributes, using default Rattus norvegicus")
        species = "Rattus norvegicus"
    else:
        species = entity.attributes["species"]
    metadata["Subject"]["species"] = species
    if "sex" not in entity.attributes:
        warnings.warn("Sex not found in entity attributes, using default M")
        sex = "M"
    else:
        sex = entity.attributes["sex"]
    metadata["Subject"]["sex"] = sex
    metadata["Subject"]["age"] = f"P{(action.datetime - entity.datetime).days}D"
    # Ecephys
    metadata["Ecephys"]["Device"][0]["description"] = "Axona Implant - Open Ephys acquisition system"
    for i, eg in enumerate(metadata["Ecephys"]["ElectrodeGroup"]):
        eg["name"] = f"tetrode{i}"
        eg["description"] = "Tetrode with for bundled 15-um-diameter microwires"
    print("Running conversion to NWB")
    converter.run_conversion(metadata=metadata, nwbfile_path=nwb_path)


### OpenEphys recording ###
def register_openephys_recording(
    project,
    action_id,
    openephys_path,
    probe_path,
    depth,
    overwrite,
    include_events,
    entity_id,
    user,
    session,
    location,
    message=None,
    tags=None,
    delete_raw_data=False,
    correct_depth_answer="y",
    register_depth=False,
):
    from .utils import register_depth as utils_register_depth

    t_start = time.time()

    user = user or project.config.get("username")
    if user is None:
        print('Missing option "user".')
        return
    location = location or project.config.get("location")
    if location is None:
        print('Missing option "location".')
        return
    openephys_path = Path(openephys_path)
    openephys_dirname = openephys_path.stem
    openephys_file = pyopenephys.File(str(openephys_path))
    openephys_exp = openephys_file.experiments[0]
    openephys_rec = openephys_exp.recordings[0]
    entity_id = entity_id or str(openephys_dirname).split("_")[0]
    session = session or str(openephys_dirname).split("_")[-1]
    if session.isdigit():
        pass
    else:
        print('Missing option "session".')
        return
    if action_id is None:
        session_dtime = datetime.strftime(openephys_exp.datetime, "%d%m%y")
        action_id = entity_id + "-" + session_dtime + "-" + session
    if entity_id not in project.entities:
        raise ValueError("Entity id not found in project. Register entity first")
    print("Generating action", action_id)
    try:
        action = project.create_action(action_id)
    except KeyError as e:
        if overwrite:
            project.delete_action(action_id)
            action = project.create_action(action_id)
        else:
            print(str(e) + ' Use "overwrite"')
            return
    # Oslo time
    action.datetime = openephys_exp.datetime
    action.type = "Recording"
    action.tags.extend(["open-ephys"])
    if tags:
        action.tags.extend(list(tags))
    print("Registering entity id " + entity_id)
    action.entities = [entity_id]
    print("Registering user " + user)
    action.users = [user]
    print("Registering location " + location)
    action.location = location

    if register_depth:
        correct_depth = utils_register_depth(project=project, action=action, depth=depth, answer=correct_depth_answer)
        if not correct_depth:
            print("Aborting registration!")
            project.delete_action(action_id)
            return
    if message:
        action.create_message(text=message, user=user, datetime=datetime.now())

    for idx, m in enumerate(openephys_rec.messages):
        print("OpenEphys message: ", m.text)
        secs = float(m.time.rescale("s").magnitude)
        dtime = openephys_rec.datetime + datetime.timedelta(
            seconds=secs + float(openephys_rec.start_time.rescale("s").magnitude)
        )
        action.create_message(text=m.text, user=user, datetime=dtime)

    convert_to_nwb(project, action, openephys_path, probe_path, entity_id, user, include_events, overwrite)

    print(f"Total conversion time: {np.round(time.time() - t_start)}s")

    if delete_raw_data:
        try:
            shutil.rmtree(openephys_path)
        except:
            print("Could not remove: ", openephys_path)


### Adjustment ###
adjustment_template = {
    "adjustment": {"unit": "um", "value": ""},
    "date": "dd.mm.yyyy:HH:MM",
    "definition": "Adjustment length of drive",
    "depth": {"unit": "mm", "value": ""},
    "experimenter": "",
    "identifier": "drive_depth_adjustment",
    "location": "Left, Right",
    "name": "drive_depth_adjustment",
    "notes": {"value": ""},
}


def register_adjustment(project, entity_id, date, adjustment, user, depth, yes):
    from expipe_plugin_cinpla.scripts.utils import position_to_dict, get_depth_from_surgery, query_yes_no

    user = user or project.config.get("username")
    if user is None:
        print('Missing option "user".')
        return
    if len(adjustment) == 0:
        print('Missing option "adjustment".')
        return
    if date is None:
        print('Missing option "date".')
        return
    DTIME_FORMAT = expipe.core.datetime_format
    if date == "now":
        date = datetime.now()
    if isinstance(date, str):
        date = datetime.strptime(date, DTIME_FORMAT)
    datestring = date.strftime(DTIME_FORMAT)
    action_id = entity_id + "-adjustment"
    try:
        action = project.actions[action_id]
        init = False
    except KeyError as e:
        action = project.create_action(action_id)
        init = True

    if not init:
        deltas = []
        for name in action.modules.keys():
            if name.endswith("adjustment"):
                deltas.append(int(name.split("_")[0]))
        index = max(deltas) + 1
        prev_depth = action.modules["{:03d}_adjustment".format(max(deltas))].contents["depth"]
    if init:
        if len(depth) > 0:
            prev_depth = position_to_dict(depth)
        else:
            prev_depth = get_depth_from_surgery(project=project, entity_id=entity_id)
        index = 0

    name = "{:03d}_adjustment".format(index)
    if not isinstance(prev_depth, dict):
        print("Unable to retrieve previous depth.")
        return
    adjustment_dict = {key: dict() for key in prev_depth}
    current = {key: dict() for key in prev_depth}
    for key, probe, val, unit in adjustment:
        pos_key = "probe_{}".format(probe)
        adjustment_dict[key][pos_key] = pq.Quantity(val, unit)
    for key, val in prev_depth.items():
        for pos_key in prev_depth[key]:
            adjust_value = adjustment_dict[key].get(pos_key) or 0 * pq.mm
            adjust_value = adjust_value.rescale("mm").astype(float)
            prev_value = prev_depth[key][pos_key].rescale("mm")
            current[key][pos_key] = round(prev_value + adjust_value, 3)  # round to um

    def last_probe(x):
        return "{:03d}".format(int(x.split("_")[-1]))

    correct = query_yes_no(
        "Correct adjustment?: \n"
        + " ".join(
            "{} {} = {}\n".format(key, pos_key, val[pos_key])
            for key, val in adjustment_dict.items()
            for pos_key in sorted(val, key=lambda x: last_probe(x))
        )
        + "New depth: \n"
        + " ".join(
            "{} {} = {}\n".format(key, pos_key, val[pos_key])
            for key, val in current.items()
            for pos_key in sorted(val, key=lambda x: last_probe(x))
        ),
        answer=yes,
    )
    print("Correct: ", correct)
    if not correct:
        print("Aborting adjustment.")
        return
    print(
        "Registering adjustment: \n"
        + " ".join(
            "{} {} = {}\n".format(key, pos_key, val[pos_key])
            for key, val in adjustment_dict.items()
            for pos_key in sorted(val, key=lambda x: last_probe(x))
        )
        + " New depth: \n"
        + " ".join(
            "{} {} = {}\n".format(key, pos_key, val[pos_key])
            for key, val in current.items()
            for pos_key in sorted(val, key=lambda x: last_probe(x))
        )
    )

    adjustment_template["depth"] = current
    adjustment_template["adjustment"] = adjustment_dict
    adjustment_template["experimenter"] = user
    adjustment_template["date"] = datestring
    print("Creating module")
    action.create_module(name=name, contents=adjustment_template)

    action.type = "Adjustment"
    action.entities = [entity_id]
    action.users.append(user)


def register_annotation(
    project,
    action_id,
    entity_id,
    action_type,
    date,
    user,
    location,
    depth,
    message,
    tags,
    templates,
    correct_depth_answer,
):
    from expipe_plugin_cinpla.scripts.utils import (
        register_templates,
        register_depth,
    )

    user = user or project.config.get("username")
    action = project.actions[action_id]
    print("Action ", action_id)
    if user is None:
        print('Missing option "user".')
        return
    print("Registering user", user)
    action.users = [user]
    if date:
        print("Registering date ", date)
        action.datetime = date
    if action_type:
        print("Registering type", action_type)
        action.type = action_type
    register_templates(action, templates, overwrite=True)
    if tags:
        print("Registering tags", tags)
        action.tags.extend(list(tags))
    if entity_id:
        print("Registering entity id", entity_id)
        action.entities = [entity_id]
    if location:
        print("Registering location", location)
        action.location = location
    if message:
        print("Registering message", message)
        action.create_message(text=message, user=user, datetime=datetime.now())
    if depth:
        correct_depth = register_depth(
            project=project, action=action, depth=depth, answer=correct_depth_answer, overwrite=True
        )


### Entity ###
def register_entity(
    project, entity_id, user, species, sex, message, location, tags, overwrite, birthday, templates, **kwargs
):
    from .utils import register_templates

    DTIME_FORMAT = expipe.core.datetime_format
    user = user or project.config.get("username")
    if user is None:
        print('Missing option "user".')
        return
    if birthday is None:
        print('Missing option "birthday".')
        return
    try:
        entity = project.create_entity(entity_id)
    except KeyError as e:
        if overwrite:
            project.delete_entity(entity_id)
            entity = project.create_entity(entity_id)
        else:
            print(str(e) + '. Use "overwrite"')
            return
    if isinstance(birthday, str):
        birthday = datetime.strftime(datetime.strptime(birthday, "%d.%m.%Y"), DTIME_FORMAT)
    register_templates(entity, templates)
    entity.datetime = datetime.now()
    entity.type = "Subject"
    if tags:
        entity.tags.extend(list(tags))
    entity.location = location

    if sex in ("male", "Male", "m", "M"):
        sex = "M"
    elif sex in ("female", "Female", "f", "F"):
        sex = "F"
    else:
        sex = "U"
    # these are required by NWB
    entity._backend.attributes.set("species", species)
    entity._backend.attributes.set("sex", sex)
    print(f"Registering user {user}")
    entity.users = [user]
    if message:
        entity.create_message(text=message, user=user, datetime=datetime.now())
    for key, val in kwargs.items():
        if "register" not in entity.modules:
            entity.modules["register"] = {}
        if isinstance(val, (str, float, int)):
            entity.modules["register"][key]["value"] = val
        elif isinstance(val, tuple):
            if not None in val:
                entity.modules["register"][key] = pq.Quantity(val[0], val[1])
        elif isinstance(val, type(None)):
            pass
        else:
            print("Not recognized type " + str(type(val)))
    print(f"Registered entity {entity_id}")


### SURGERY ###
def register_surgery(
    project, entity_id, procedure, date, user, weight, location, overwrite, position, angle, message, tags, templates
):
    from .utils import register_templates

    # TODO tag sucject as active
    if weight == (None, None):
        print('Missing option "weight".')
        return
    user = user or project.config.get("username")
    if user is None:
        print('Missing option "user".')
        return
    location = location or project.config.get("location")
    if location is None:
        print('Missing option "location".')
        return
    weight = pq.Quantity(weight[0], weight[1])
    action_id = entity_id + "-surgery-" + procedure
    try:
        action = project.create_action(action_id)
    except KeyError as e:
        if overwrite:
            project.delete_action(action_id)
            action = project.create_action(action_id)
        else:
            print(str(e) + ' Use "overwrite"')
            return
    entity = project.entities[entity_id]
    surgery_key = "surgery-" + procedure + "-" + date.strftime(expipe.core.datetime_key_format)
    if surgery_key not in entity.modules:
        entity.modules[surgery_key] = {}
    entity.modules[surgery_key]["weight"] = weight
    entity.tags.extend(["surgery-" + procedure])
    entity.users.append(user)

    DTIME_FORMAT = expipe.core.datetime_format
    register_templates(action, templates)
    if date == "now":
        date = datetime.now()
    if isinstance(date, str):
        date = datetime.strftime(date, DTIME_FORMAT)
    action.datetime = date
    print("Registering location", location)
    action.location = location
    action.type = "Surgery"
    action.tags = [procedure]
    if tags:
        action.tags.extend(list(tags))
    action.entities = [entity_id]
    print("Registering user", user)
    action.users.append(user)
    if message:
        action.create_message(text=message, user=user, datetime=datetime.now())

    for key, probe, x, y, z, unit in position:
        action.modules[key] = {}
        probe_key = "probe_{}".format(probe)
        action.modules[key][probe_key] = {}
        print("Registering position " + "{} {}: x={}, y={}, z={} {}".format(key, probe, x, y, z, unit))
        action.modules[key][probe_key]["position"] = pq.Quantity([x, y, z], unit)
    for key, probe, ang, unit in angle:
        probe_key = "probe_{}".format(probe)
        if probe_key not in action.modules[key]:
            action.modules[key][probe_key] = {}
        print("Registering angle " + "{} {}: angle={} {}".format(key, probe, ang, unit))
        action.modules[key][probe_key]["angle"] = pq.Quantity(ang, unit)


def register_perfusion(project, entity_id, date, user, weight, overwrite, message, templates, location):
    from .utils import register_templates

    action_id = entity_id + "-perfusion"
    user = user or project.config.get("username")
    if user is None:
        print('Missing option "user".')
        return
    location = location or project.config.get("location")
    if location is None:
        print('Missing option "location".')
        return
    try:
        action = project.create_action(action_id)
    except KeyError as e:
        if overwrite:
            project.delete_action(action_id)
            action = project.create_action(action_id)
        else:
            print(str(e) + '. Use "overwrite"')
            return
    register_templates(action, templates)
    DTIME_FORMAT = expipe.core.datetime_format
    if date == "now":
        date = datetime.now()
    if isinstance(date, str):
        date = datetime.strftime(date, DTIME_FORMAT)
    if message:
        action.messages.create_message(text=message, user=user, datetime=datetime.now())
    action.datetime = date
    print("Registering location", location)
    action.location = location
    action.type = "Surgery"
    action.tags = ["perfusion"]
    action.entities = [entity_id]
    print("Registering user " + user)
    action.users = [user]
    if weight != (None, None):
        action.create_module("perfusion", contents={"weight": pq.Quantity(weight[0], weight[1])})
    entity = project.entities[entity_id]
    entity.tags.extend(["perfused"])
